package com.aaron.mbpet.views.parameters;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.NonUniqueResultException;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.aaron.mbpet.MbpetUI;
import com.aaron.mbpet.domain.Parameters;
import com.aaron.mbpet.domain.TRT;
import com.aaron.mbpet.domain.TestCase;
import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.filter.Compare.Equal;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.server.Page;
import com.vaadin.shared.Position;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.themes.ValoTheme;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

// Define a sub-window by inheritance
public class TRTEditor extends Window implements Button.ClickListener {


	private Table table;
	private Button createButton;
	private Button cancelButton;
	
	private JPAContainer<Parameters> parameters = ((MbpetUI) UI.getCurrent()).getParameterscontainer();
	private JPAContainer<TRT> trtcontainer;
	BeanItem<TRT> beanItem;
	TRT currTrt;
	Parameters parentparams;
	
	FieldGroup binder;
	private TRTForm TRTForm;

	boolean editmode = false;
	private String prevTitle="";

	
	/*
	 * Create new Test Session
	 */
	public TRTEditor(TRT currTrt, Parameters parentparameters, Table table) {
		
		this.currTrt = currTrt;	//new TRT(); 
		this.beanItem = new BeanItem<TRT>(currTrt);
		trtcontainer = ((MbpetUI) UI.getCurrent()).getTrtcontainer();	

		init(parentparameters, table);
	}
	


	/*
	 * Edit Mode
	 */
	public TRTEditor(Object trtid, Parameters parentparameters, Table table) {		//JPAContainer<TestCase> container
		this.editmode = true;
        
        trtcontainer = ((MbpetUI) UI.getCurrent()).getTrtcontainer();	//JPAContainerFactory.make(TestSession.class, MbpetUI.PERSISTENCE_UNIT);	//container;
        this.currTrt = trtcontainer.getItem(trtid).getEntity();
        this.beanItem = new BeanItem<TRT>(currTrt);

		prevTitle = currTrt.getAction();

        init(parentparameters, table);
	}
	
	
	private void init(Parameters parentparameters, Table table) {
		center();
		setResizable(true);
		setClosable(true);
		setModal(false);

		this.parentparams = parentparameters;
		this.table = table;
		
        setSizeUndefined();
        setContent(AutoGeneratedLayoutDesign()); //ManualLayoutDesign
        setCaption(buildCaption());
	}
	
	
    /**
     * @return the caption of the editor window
     */
    private String buildCaption() {
    	if (editmode) {
    		return String.format("Edit: Target Response Time: %s", 
    				currTrt.getAction());
    	} else {
    		return "Create: Target Response Time";
    	}
//    	else if (!(parentparams == null) ) {		//.getItemProperty("firstname").getValue()
//    		return String.format("Create Target Response Time: %s", 
//    				parentparams.getTitle());		//testcases.getItem(parentCase.getId()).getItemProperty("title")
//    	} 
    }
    
	
    
	private Component AutoGeneratedLayoutDesign() {
		final VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);
		layout.setMargin(true);
	
		// set parent Test Case manually without a field
		if (editmode == false) {
			currTrt.setParentparameter(parentparams);			
		}
		
		TRTForm = new TRTForm();
		layout.addComponent(TRTForm);

		binder = new FieldGroup();
//		BeanItem<Person> item = new BeanItem<Person>(person);		// takes item as argument
//		item.addNestedProperty("address.street");	// Address info is not person but address to which person is linked
		
		binder.setItemDataSource(beanItem); 	// link to data model to binder
		binder.bindMemberFields(TRTForm);	// link the layout to binder	
		
		((TextField)TRTForm.getComponent(TRTForm.getComponentIndex(TRTForm.action))).focus();

		
		// button layout
		HorizontalLayout buttons = new HorizontalLayout();
		buttons.setWidth("100%");
		buttons.addStyleName("buttons-margin-top");
		layout.addComponent(buttons);
		
		createButton = new Button("Create", this);
		if (editmode) createButton.setCaption("Save");
		createButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
		createButton.setClickShortcut(KeyCode.ENTER);
		
		cancelButton = new Button("Cancel", this);
		
		buttons.addComponents(createButton, cancelButton);
		buttons.setComponentAlignment(createButton, Alignment.MIDDLE_LEFT);
		buttons.setComponentAlignment(cancelButton, Alignment.MIDDLE_RIGHT);
		
		return layout;
	}
	
	
	
	   public void buttonClick(ClickEvent event) {
	        if (event.getButton() == createButton) {
//	            editorForm.commit();
//	            fireEvent(new EditorSavedEvent(this, personItem));
	        	
	        	TRT queriedTRT = null;
	        	String wrongTitle = "";
	        	String errormsg = "'Action' field is recquired!";
					try {
						TRTForm.toggleValidationMessages(true);
						//					title.setValidationVisible(true);

						// commit the fieldgroup
						binder.commit();
						
						boolean titleOK = true;

						// check SESSION title doesnt exist for THIS SESSION
						int id =0;
						id = beanItem.getBean().getId();	//testsession.getId();
						System.out.println("parentparams.getTarget_response_times() : " + parentparams.getTarget_response_times());
						if (currTrt.getAction()==null || currTrt.getAction().equals("")) {
							binder.discard();
							titleOK = false;
//							Notification not = new Notification("'Action' field is recquired!");
//							not.setStyleName("failure");
//							close();
//							UI.getCurrent().addWindow(new TRTEditor(parentparams, grid));
						} else {
							
							for (TRT t : parentparams.getTarget_response_times()) {	//sessions.getItemIds()
							System.out.println("Existing action -> new action : " + t.getAction() + "->" + currTrt.getAction());
							System.out.println("Existing id -> new id : " + t.getId() + "->" + id);
								if (t.getAction().equals(currTrt.getAction()) && !(t.getId()==id) ) {	
									currTrt.setAction(prevTitle);
									if (editmode == true) {
										trtcontainer.addEntity(currTrt);
									}
									wrongTitle = t.getAction();
									errormsg = "The Action '" + wrongTitle + "' already exists. Please rename.";
									titleOK = false;
									break;
									}
							}
						}
						
						
						if (titleOK == true) {
							System.out.println("TITLE WAS FINE. EDITING");
							
							// add NEW bean object to db through jpa container
							if (editmode == false) {
									
								// 1. add to container
								trtcontainer.addEntity(beanItem.getBean()); //jpa container	

								// 2. retrieving db generated id
								EntityManager em = Persistence.createEntityManagerFactory("mbpet")
										.createEntityManager();
								Query query = em.createQuery("SELECT OBJECT(t) FROM TRT t WHERE t.action = :action AND t.parentparameter = :parentparameter");
								//		            query.setParameter("title", newsession.getTitle());
								System.out.println("THE ENTERED VARIABLES: " + currTrt.getAction() + " " + currTrt.getAverage() + " " + beanItem.getBean().getMax());
								query.setParameter("action", currTrt.getAction());
								query.setParameter("parentparameter", currTrt.getParentparameter()); //MainView.sessionUser
								List<TRT> results = query.getResultList(); // getSingleResult();	//(TRT) 
								System.out.println("result list size: " + results.size());
								queriedTRT = results.get(results.size()-1);
								System.out.println("the generated id is: " + queriedTRT.getId());
								id = queriedTRT.getId(); // here is the id we need for tree
								

								// 3. update parent Parameters to add TRT to List<TRT> trt
								parentparams.addTRT(queriedTRT);
								parameters.addEntity(parentparams);
								
								
								// 4. UPDATE grid
			              	  	
								
								System.out.println("WHAT IS NEW LIST OF TRTs: "
												+ parentparams.getTarget_response_times()); // testing purposes
								for (TRT s : parentparams.getTarget_response_times()) {
									System.out.println(s.getId() + " - "
											+ s.getAction()); // testing purposes	            		
								}
									
				            	
							} else if (editmode == true){
								// EDIT existing object
								
								
			              	  	//1 UPDATE parentparameters reference
								parentparams.updateTRTData(trtcontainer.getItem(currTrt.getId()).getEntity());
								System.out.println("TRT is now: " + currTrt.getAction());
	
								// 2 UPDATE container
								trtcontainer.addEntity(beanItem.getBean());
								System.out.println("Entity is now: " + trtcontainer.getItem(currTrt.getId()).getEntity().getAction());
	
								// 3 UPDATE tree title
//			              	  	tree.setItemCaption(currTrt.getId(), trtcontainer.getItem(currTrt.getId()).getEntity().getAction());
			              	  	
			              	  		              	  		
			              	  	id = currTrt.getId();
	
							}
		              	  	
//			            	System.out.println("WHAT IS NEW LIST OF TRTs: " + parentCase.getSessions()); // testing purposes
//			            	for (TestSession s : parentCase.getSessions()) {
//				            	System.out.println(s.getId() + " - " + s.getTitle()); // testing purposes	            		
//			            	}
			            	
			            	
			            	if ( editmode==false ) {
			            		// 4 UPDATE table title
//			            		table.select(beanItem.getBean().getId());	//(testsession.getId());
			            		confirmNotification(currTrt.getAction(), "was created");
			            	
			            	} else if ( editmode==true ) {
			            		confirmNotification(currTrt.getAction(), "was edited");
			            	} 
			            	
		            	
			            // title already existed	
						} else {
							System.out.println("title was NOT fine.");
//							testsession = sessions.getItem(id).getEntity();
//							System.out.println("db session is: " + testsession.getId() + " " + testsession.getTitle());

							if (editmode==false) {
								binder.discard();
//								Notification.show("The Action '" + wrongTitle + "' already exists. Please rename.", Type.ERROR_MESSAGE);	//testsession.getTitle()
								errorNotification(errormsg);
//								((TextField)TRTForm.getComponent(
//										TRTForm.getComponentIndex(TRTForm.action)))
//											.setComponentError(new UserError(errormsg));
								UI.getCurrent().addWindow(new TRTEditor(currTrt, parentparams, table));								
							} else if (editmode==true){
								binder.discard();
								errorNotification(errormsg);
//								((TextField)TRTForm.getComponent(
//										TRTForm.getComponentIndex(TRTForm.action))).setRequired(true);
						        UI.getCurrent().addWindow(new TRTEditor(currTrt.getId(), parentparams, table));
							} 
								
						}
		            
					} catch (CommitException e) {
						binder.discard();
						Notification not = new Notification("All fields are recquired! Please try again.");
						errorNotification("All fields are recquired! Please try again.");
						UI.getCurrent().addWindow(new TRTEditor(currTrt, parentparams, table));
					} catch (NonUniqueResultException e) {
						e.printStackTrace();
						binder.discard();
						errorNotification("The Action '" + currTrt.getAction() + "' already exists. Please rename.");
				        UI.getCurrent().addWindow(new TRTEditor(currTrt, parentparams, table));
					}
//					catch (NonUniqueResultException e) {
//						binder.discard();
//						Notification.show("'Title' must be a unique name.\n'" +
//											queriedSession.getTitle() + 
//											"' already exists.\n\nPlease try again.", Type.WARNING_MESSAGE);
//						UI.getCurrent().addWindow(new TestSessionEditor(tree, parentCase));
//					}
	            
	        } else if (event.getButton() == cancelButton) {
	        	binder.discard();
	        }
//	        binder.clear();
//	        form.disableValidationMessages();
//	        setTreeItemsExpanded();

			close(); // Close the sub-window
	    }

	   
	   
	private void filterContainerBySUT(TestCase sut) {
    	trtcontainer.removeAllContainerFilters();
//    	Equal ownerfilter = new Equal("parentcase", getTestCaseByTitle());//  ("parentcase", getTestCaseByTitle(), true, false);
    	Equal paramsfilter = new Equal("parentparameter", parentparams);//  ("parentcase", getTestCaseByTitle(), true, false);
    	
    	trtcontainer.addContainerFilter(paramsfilter);
	}

	
	private void confirmNotification(String deletedItem, String message) {
        // welcome notification
        Notification notification = new Notification(deletedItem, Type.TRAY_NOTIFICATION);
        notification
                .setDescription(message);
        notification.setHtmlContentAllowed(true);
        notification.setStyleName("dark small");	//tray  closable login-help
        notification.setPosition(Position.BOTTOM_RIGHT);
        notification.setDelayMsec(500);
        notification.show(Page.getCurrent());
	}
	
	private void errorNotification(String message) {
        // welcome notification
        Notification notification = new Notification("Error");
        notification.setDescription(message);
        notification.setHtmlContentAllowed(true);
        notification.setStyleName("failure");	//tray  closable login-help
        notification.setPosition(Position.TOP_CENTER);
        notification.setDelayMsec(1000);
        notification.show(Page.getCurrent());
	}
	
	

}