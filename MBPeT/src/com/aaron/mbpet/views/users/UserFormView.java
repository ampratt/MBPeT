package com.aaron.mbpet.views.users;

import com.aaron.mbpet.MbpetUI;
import com.aaron.mbpet.domain.User;
import com.aaron.mbpet.views.LoginView;
import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

public class UserFormView extends HorizontalLayout implements Button.ClickListener {

	JPAContainer<User> persons;
	private Button submitButton;
	private Button cancelButton;
	UserForm form;
	FieldGroup binder;
	User user;
	BeanItem<User> beanUserItem;
	private Table table;
	private Button newButton;
	private Button deleteButton;
	private Button editButton;
	
	public UserFormView(JPAContainer<User> people, BeanItem<User> newItem){
		this.persons = people;
		this.user = new User();
		newItem = new BeanItem<User>(user); 
		this.beanUserItem = newItem;


//		persons = JPAContainerFactory.make(User.class,
//                MbpetUI.PERSISTENCE_UNIT);
		setMargin(true);
		setWidth("100%");

		addComponent(ManualLayoutDesign());
		addComponent(personsTable());
//		addComponent(AutoGeneratedLayoutDesign());
	}
	
	/**
	 * If you know the data structure behind, define things manually for more control
	 * @return
	 */
	private Component ManualLayoutDesign() {
		final VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);
//		layout.setMargin(true);
//		setContent(layout);
		
		layout.addComponent(new Label("<h2>Create new user account.</h2>", 
				ContentMode.HTML));
		
//		user = new User();
//		user.setFirstname("Jim");
//		user.setLastname("Halpert");
//		user.setUsername("jim.halpert");
//		user.setPassword("passw0rd");
//		user.setOrganization("AA");
//		person.setEmail("john.smith@eample.com");
		
//		Address address = new Address();
//		address.setStreet("Main street");
//		address.setCity("Turku");
//		address.setZip("123456");
//		person.setAddress(address);
		
		// empty bean for testing
//		user = new User();
//		person.setAddress(new Address());
		
		// CREATE FIELDS MANUALLY
		form = new UserForm();
		layout.addComponent(form);
		
		binder = new FieldGroup();
//		beanUserItem = new BeanItem<User>(user);		// takes item as argument
//		item.addNestedProperty("address.street");	// Address info is not person but address to which person is linked
//		item.addNestedProperty("address.zip");
//		item.addNestedProperty("address.city");
		binder.setItemDataSource(beanUserItem); 	// link to data model to binder
		
		binder.bindMemberFields(form);	// link to layout		
		
		// button layout
		HorizontalLayout buttons = new HorizontalLayout();
//		buttons.setWidth("100%");
		layout.addComponent(buttons);
		
		submitButton = new Button("Submit", this);
		submitButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
//		submitButton.setClickShortcut(KeyCode.ENTER);
		
		cancelButton = new Button("Cancel", this);
		
		buttons.addComponents(submitButton, cancelButton);
		buttons.setComponentAlignment(submitButton, Alignment.MIDDLE_LEFT);
		buttons.setComponentAlignment(cancelButton, Alignment.MIDDLE_RIGHT);
				
		return layout;
	}
	
	
    public void buttonClick(ClickEvent event) {
        if (event.getButton() == submitButton) {
//            editorForm.commit();
//            fireEvent(new EditorSavedEvent(this, personItem));
				try {
				form.enableValidationMessages();
				binder.commit();
                persons.addEntity(beanUserItem.getBean());	//jpa container

//	            UI.getCurrent().getNavigator()
//	            	.navigateTo(LoginView.NAME +
//	            			 "/" + user.getId());
//	            Notification.show("User successfully created: " +
//	            		"\nusername: " + user.GetUsername() +
//	            		"\npassword: " + user.getPassword() +
//	            		"\nuser object id" + user.getId(),
//	            		Type.TRAY_NOTIFICATION);
	            
				} catch (CommitException e) {
					e.printStackTrace();
				}
            
        } else if (event.getButton() == cancelButton) {
        	binder.discard();
        }
//        binder.clear();
        form.disableValidationMessages();
        UI.getCurrent().getNavigator().navigateTo(LoginView.NAME);			
    }
	
    
    
	private Component AutoGeneratedLayoutDesign() {
		final VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
//		setContent(layout);
		
		layout.addComponent(new Label("<h2>Auto-Generated field creation</h2>", ContentMode.HTML));

		final User user = new User();
		user.setFirstname("Pam");
		user.setLastname("Halpert");
		user.setUsername("pam.halpert");
		user.setPassword("passw0rd");
		user.setOrganization("AA");
//		user.setEmail("john.smith@eample.com");
		
//		Address address = new Address();
//		address.setStreet("Main street");
//		address.setCity("Turku");
//		address.setZip("123456");
//		user.setAddress(address);
		
		final FieldGroup binder = new FieldGroup();
		BeanItem<User> item = new BeanItem<User>(user);		// takes item as argument
//		item.addNestedProperty("address.street");	// Address info is not person but address to which person is linked
//		item.addNestedProperty("address.zip");
//		item.addNestedProperty("address.city");
		
		binder.setItemDataSource(item); 	// link to data model to binder
		
//		binder.bindMemberFields(form);	// link to layout

		// GENERATE FIELDS
		
//		for (Object propertyId : item.getItemPropertyIds()) {
////			if(!"address".equals(propertyId)) {
//			if("password".equals(propertyId)) {
//				PasswordField field = new PasswordField();
//				binder.bind(field, propertyId);
//				layout.addComponent(field);					
//			} else {
//				Field field = binder.buildAndBind(propertyId);
//				layout.addComponent(field);							
//			}
//		}
		
		// using buildAndBind()
//		Field field = binder.buildAndBind("firstname");
//		layout.addComponent(field);
//		
//		// using bind() to determine what type of field is created yourself...
//		TextField unamefield = new TextField();
//		binder.bind(unamefield, "username");
//		layout.addComponent(unamefield);
		
		PasswordField pfield = new PasswordField();
		binder.bind(pfield, "password"	);
		layout.addComponent(pfield);	
		
		layout.addComponent(new Button("save", new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					binder.commit();
				} catch (CommitException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		}));
		
		return layout;
	}
	
	@SuppressWarnings({ "serial", "deprecation" })
	public Component personsTable(){
		VerticalLayout l = new VerticalLayout();
	
        
		table = new Table("persons in db", persons);
        table.setSelectable(true);
        table.setImmediate(true);
        table.addListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(ValueChangeEvent event) {
                setModificationsEnabled(event.getProperty().getValue() != null);
            }

            private void setModificationsEnabled(boolean b) {
                deleteButton.setEnabled(b);
                editButton.setEnabled(b);
            }
        });
        
		table.addListener(new ItemClickListener() {
            @Override
            public void itemClick(ItemClickEvent event) {
                if (event.isDoubleClick()) {
                    table.select(event.getItemId());
                }
            }
        });
		
		// controls
		HorizontalLayout toolbar = new HorizontalLayout();
        newButton = new Button("Add");
        newButton.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                final BeanItem<User> newPersonItem = new BeanItem<User>(
                        new User());
//                PersonEditor personEditor = new PersonEditor(newPersonItem, "Create New User Account", false);
//                personEditor.addListener(new EditorSavedListener() {
//                    @Override
//                    public void editorSaved(EditorSavedEvent event) {
//                        persons.addEntity(newPersonItem.getBean());
//                    }
//                });
//                UI.getCurrent().addWindow(personEditor);
//                personEditor.center();
            }
        });

        deleteButton = new Button("Delete");
        deleteButton.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                persons.removeItem(table.getValue());
            }
        });
        deleteButton.setEnabled(false);    
        
        editButton = new Button("Edit");
        editButton.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                UI.getCurrent().addWindow(
                        new UserEditor(table.getItem(table.getValue()), "Edit User Account", true));
                System.out.println("EDITED PERSON: " + persons.getItem(table.getValue()));

            }
        });
        editButton.setEnabled(false);
        
        toolbar.setWidth("100%");
        toolbar.addComponents(newButton, deleteButton, editButton);
//        toolbar.addComponent(searchField);
//        toolbar.setExpandRatio(searchField, 1);
//        toolbar.setComponentAlignment(searchField, Alignment.TOP_RIGHT);
        
        l.addComponents(toolbar, table);
        l.setExpandRatio(table, 1);
        l.setSizeFull();
        
		return l;
	}
}
